from pathlib import Path
from pyshell import PyShell, PyShellOptions, AbortOnFailure, NativeBackend, \
    SingleFileLogger
from pyshell.modules import Doxygen
import pytest
import shutil

class DoxygenFixture:
    # Path to the repo's doxyfile
    DOXYFILE_PATH = Path(__file__).parent.joinpath("../../../doxygen/doxyfile")

    # Working directory that each command must use
    # This is the directory that relative paths in the doxyfile are relative to
    CWD = Path(__file__).parent.joinpath("../../..")

    # Path to the log file that each test case writes to
    LOG_FILE_PATH = Path(__file__).parent.joinpath("doxygen.log")

    # Path that doxygen will write its generated files to
    DOXYGEN_OUTPUT_DIR = CWD.joinpath(".docs")


    def clean(self):
        """
        Removes all files and directories generated by this test.
        """
        if DoxygenFixture.LOG_FILE_PATH.exists():
            DoxygenFixture.LOG_FILE_PATH.unlink()

        if DoxygenFixture.DOXYGEN_OUTPUT_DIR.exists():
            shutil.rmtree(DoxygenFixture.DOXYGEN_OUTPUT_DIR)


@pytest.fixture()
def doxy():
    fixture = DoxygenFixture()

    # Make sure all previously generated files are removed before running the
    #   test
    fixture.clean()
    yield fixture

    # Doxygen produces a large number of files. Clear them out to avoid leaving
    #   them behind after the test
    fixture.clean()


def test_generate_docs(doxy: DoxygenFixture):
    # Initialize a PyShell instance for running commands
    pyshell = PyShell(
        NativeBackend(),
        SingleFileLogger("doxygen.log"),
        AbortOnFailure(),
        PyShellOptions()
    )

    # Run some commands
    Doxygen.generate_docs(DoxygenFixture.DOXYFILE_PATH, pyshell)

    # Verify that doxygen files were generated
    assert DoxygenFixture.DOXYGEN_OUTPUT_DIR.exists()
    index_html = DoxygenFixture.DOXYGEN_OUTPUT_DIR.joinpath("html", "index.html")
    assert index_html.exists()
    assert index_html.is_file()
